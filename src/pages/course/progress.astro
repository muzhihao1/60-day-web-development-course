---
/**
 * Progress Dashboard Page
 * Shows comprehensive learning progress with visual indicators
 */
import BaseLayout from '@layouts/BaseLayout.astro'
import CourseProgressIndicator from '@components/CourseProgressIndicator.astro'

// This would normally come from a database or user session
// For now, we'll use localStorage data passed from client
const currentDay = 15 // Example current day
const completedDays = [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15] // Example data
---

<BaseLayout title="学习进度" description="查看你的学习进度和成就">
  <div class="progress-page">
    <header class="page-header">
      <h1>学习进度仪表板</h1>
      <p class="page-description">
        追踪你的学习历程，庆祝每一个里程碑
      </p>
    </header>

    <!-- Main Progress Indicator -->
    <CourseProgressIndicator 
      currentDay={currentDay} 
      completedDays={completedDays} 
    />

    <!-- Learning Calendar -->
    <section class="calendar-section">
      <h2>学习日历</h2>
      <div class="calendar-container" id="learning-calendar">
        <!-- Calendar will be generated by JavaScript -->
      </div>
    </section>

    <!-- Quick Stats -->
    <section class="stats-section">
      <h2>学习统计</h2>
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-icon">⏱️</div>
          <div class="stat-content">
            <span class="stat-value" id="total-hours">0</span>
            <span class="stat-label">总学习时长</span>
          </div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">📚</div>
          <div class="stat-content">
            <span class="stat-value">{completedDays.length}</span>
            <span class="stat-label">已完成课程</span>
          </div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">💪</div>
          <div class="stat-content">
            <span class="stat-value" id="exercises-completed">0</span>
            <span class="stat-label">完成练习</span>
          </div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">⭐</div>
          <div class="stat-content">
            <span class="stat-value" id="avg-score">0</span>
            <span class="stat-label">平均评分</span>
          </div>
        </div>
      </div>
    </section>

    <!-- Actions -->
    <section class="actions-section">
      <a href="/course" class="btn btn-primary">
        返回课程列表
      </a>
      <button class="btn btn-secondary" id="export-progress">
        导出进度报告
      </button>
    </section>
  </div>

  <style>
    .progress-page {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem;
    }

    .page-header {
      text-align: center;
      margin-bottom: 3rem;
    }

    .page-header h1 {
      font-size: 2.5rem;
      color: var(--color-text);
      margin-bottom: 0.5rem;
    }

    .page-description {
      font-size: 1.125rem;
      color: var(--color-text-secondary);
    }

    /* Calendar Section */
    .calendar-section {
      background: var(--color-bg);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-lg);
      padding: 2rem;
      margin-bottom: 2rem;
    }

    .calendar-section h2 {
      font-size: 1.25rem;
      margin-bottom: 1.5rem;
      color: var(--color-text);
    }

    .calendar-container {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 0.5rem;
    }

    .calendar-day {
      aspect-ratio: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--color-bg-secondary);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-sm);
      font-size: 0.875rem;
      font-weight: 500;
      color: var(--color-text-secondary);
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .calendar-day.completed {
      background: var(--color-primary);
      color: white;
      border-color: var(--color-primary);
    }

    .calendar-day.current {
      border: 2px solid var(--color-accent);
      color: var(--color-accent);
      font-weight: 700;
    }

    .calendar-day:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    /* Stats Section */
    .stats-section {
      margin-bottom: 2rem;
    }

    .stats-section h2 {
      font-size: 1.25rem;
      margin-bottom: 1.5rem;
      color: var(--color-text);
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
    }

    .stat-card {
      display: flex;
      align-items: center;
      gap: 1.5rem;
      padding: 1.5rem;
      background: var(--color-bg);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-lg);
      transition: all 0.3s ease;
    }

    .stat-card:hover {
      border-color: var(--color-primary);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .stat-icon {
      font-size: 2.5rem;
      opacity: 0.8;
    }

    .stat-content {
      display: flex;
      flex-direction: column;
    }

    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--color-text);
    }

    .stat-label {
      font-size: 0.875rem;
      color: var(--color-text-secondary);
    }

    /* Actions Section */
    .actions-section {
      display: flex;
      gap: 1rem;
      justify-content: center;
      padding: 2rem 0;
    }

    .btn {
      padding: 0.75rem 2rem;
      font-size: 1rem;
      border-radius: var(--radius-md);
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      transition: all 0.2s ease;
      border: none;
      cursor: pointer;
    }

    .btn-primary {
      background: var(--color-primary);
      color: white;
    }

    .btn-primary:hover {
      background: var(--color-primary);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(66, 184, 131, 0.3);
    }

    .btn-secondary {
      background: var(--color-bg);
      color: var(--color-text);
      border: 1px solid var(--color-border);
    }

    .btn-secondary:hover {
      background: var(--color-bg-secondary);
      border-color: var(--color-primary);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .progress-page {
        padding: 1rem;
      }

      .page-header h1 {
        font-size: 2rem;
      }

      .stats-grid {
        grid-template-columns: repeat(2, 1fr);
      }

      .actions-section {
        flex-direction: column;
      }

      .btn {
        width: 100%;
        justify-content: center;
      }
    }
  </style>

  <script>
    // Generate calendar
    function generateCalendar() {
      const calendar = document.getElementById('learning-calendar')
      if (!calendar) return

      const completedDaysData = localStorage.getItem('completedDays')
      const completedDays = completedDaysData ? JSON.parse(completedDaysData) : []
      const currentDay = 15 // This should be calculated based on actual date

      // Add day headers
      const dayHeaders = ['日', '一', '二', '三', '四', '五', '六']
      dayHeaders.forEach(day => {
        const header = document.createElement('div')
        header.className = 'calendar-day-header'
        header.textContent = day
        header.style.fontWeight = '600'
        header.style.color = 'var(--color-text-secondary)'
        calendar.appendChild(header)
      })

      // Generate 60 days
      for (let i = 1; i <= 60; i++) {
        const dayElement = document.createElement('div')
        dayElement.className = 'calendar-day'
        dayElement.textContent = i.toString()
        
        if (completedDays.includes(i.toString())) {
          dayElement.classList.add('completed')
        }
        
        if (i === currentDay) {
          dayElement.classList.add('current')
        }
        
        dayElement.addEventListener('click', () => {
          window.location.href = `/course/day-${i}`
        })
        
        calendar.appendChild(dayElement)
      }
    }

    // Update stats from localStorage
    function updateStats() {
      // Total hours (estimate based on completed days * 1 hour)
      const completedDaysData = localStorage.getItem('completedDays')
      const completedDays = completedDaysData ? JSON.parse(completedDaysData) : []
      const totalHours = document.getElementById('total-hours')
      if (totalHours) {
        totalHours.textContent = completedDays.length.toString()
      }

      // Exercises completed (example calculation)
      const exercisesCompleted = document.getElementById('exercises-completed')
      if (exercisesCompleted) {
        exercisesCompleted.textContent = (completedDays.length * 2).toString()
      }

      // Average score (example)
      const avgScore = document.getElementById('avg-score')
      if (avgScore) {
        avgScore.textContent = '4.5'
      }
    }

    // Export progress report
    document.getElementById('export-progress')?.addEventListener('click', () => {
      const completedDaysData = localStorage.getItem('completedDays')
      const completedDays = completedDaysData ? JSON.parse(completedDaysData) : []
      
      const report = {
        date: new Date().toLocaleDateString('zh-CN'),
        completedDays: completedDays.length,
        totalDays: 60,
        percentage: Math.round((completedDays.length / 60) * 100),
        days: completedDays
      }
      
      const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `learning-progress-${new Date().toISOString().split('T')[0]}.json`
      a.click()
      URL.revokeObjectURL(url)
    })

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
      generateCalendar()
      updateStats()
    })
  </script>
</BaseLayout>