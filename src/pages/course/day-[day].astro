---
/**
 * 每日课程页面模板
 * 动态路由，根据day参数渲染对应的课程内容
 */
import { getCollection, getEntry } from 'astro:content'
import BaseLayout from '@layouts/BaseLayout.astro'
import type { DayContent, PhaseInfo } from '../../types'

export async function getStaticPaths() {
  const courses = await getCollection('courses')
  const phases = await getCollection('phases')
  
  return courses.map((course) => {
    const phase = phases.find(p => p.id.includes(course.data.phase))
    return {
      params: { day: course.data.day.toString() },
      props: { course, phase }
    }
  })
}

const { day } = Astro.params
const { course, phase } = Astro.props

// 获取相关的练习和解决方案
const exercises = await getCollection('exercises', ({ data }) => data.day === parseInt(day))
const solutions = await getCollection('solutions', ({ data }) => data.day === parseInt(day))
const codeExamples = await getCollection('codeExamples', ({ data }) => data.day === parseInt(day))

// 计算前一天和后一天的链接
const prevDay = parseInt(day) > 1 ? parseInt(day) - 1 : null
const nextDay = parseInt(day) < 60 ? parseInt(day) + 1 : null

// 获取页面元数据
const pageTitle = `${course.data.title} | 60天Web开发课程`
const pageDescription = course.data.description

// Get the Content component from the course
const { Content } = await course.render()
---

<BaseLayout title={course.data.title} description={pageDescription} currentDay={parseInt(day)}>
  <div class="course-container">

    <!-- 课程头部 -->
    <header class="course-header">
      <div class="course-meta">
        <span class="phase-badge">{phase.data.name}</span>
        <span class="difficulty-badge difficulty-{course.data.difficulty}">
          {course.data.difficulty === 'beginner' ? '初级' : 
           course.data.difficulty === 'intermediate' ? '中级' : '高级'}
        </span>
        <span class="time-estimate">预计时间：{course.data.estimatedTime}分钟</span>
      </div>
      
      <h1 class="course-title">
        <span class="day-number">Day {day}</span>
        {course.data.title}
      </h1>
      
      <p class="course-description">{course.data.description}</p>
    </header>

    <!-- 学习目标 -->
    <section class="learning-objectives">
      <h2>📋 学习目标</h2>
      <ul>
        {course.data.objectives.map((objective) => (
          <li>{objective}</li>
        ))}
      </ul>
    </section>

    <!-- 主要内容 -->
    <article class="course-content">
      <Content />
    </article>

    <!-- 代码示例部分 -->
    {codeExamples.length > 0 && (
      <section class="code-examples-section">
        <h2>💻 代码示例</h2>
        {codeExamples.map((example) => (
          <div class="code-example-card">
            <h3>{example.data.title}</h3>
            <p>{example.data.description}</p>
            <a href={`/course/day-${day}/code`} class="btn btn-secondary">
              查看代码
            </a>
          </div>
        ))}
      </section>
    )}

    <!-- 练习部分 -->
    {exercises.length > 0 && (
      <section class="exercises-section">
        <h2>💪 今日练习</h2>
        {exercises.map((exercise) => (
          <div class="exercise-card">
            <h3>{exercise.data.title}</h3>
            <p>{exercise.data.description}</p>
            <div class="exercise-meta">
              <span class="difficulty">{exercise.data.difficulty}</span>
              <span class="time">{exercise.data.estimatedTime}分钟</span>
            </div>
            <a href={`/course/day-${day}/exercise`} class="btn btn-primary">
              开始练习
            </a>
            {solutions.length > 0 && (
              <a href={`/course/day-${day}/solution`} class="btn btn-outline">
                查看解决方案
              </a>
            )}
          </div>
        ))}
      </section>
    )}

    <!-- 资源链接 -->
    {course.data.resources && course.data.resources.length > 0 && (
      <section class="resources-section">
        <h2>📚 相关资源</h2>
        <ul class="resources-list">
          {course.data.resources.map((resource) => (
            <li>
              <a href={resource.url} target="_blank" rel="noopener noreferrer">
                {resource.type === 'article' && '📄'}
                {resource.type === 'video' && '🎥'}
                {resource.type === 'documentation' && '📖'}
                {resource.type === 'tool' && '🔧'}
                {resource.title}
              </a>
            </li>
          ))}
        </ul>
      </section>
    )}

    <!-- 导航按钮 -->
    <nav class="course-navigation">
      {prevDay && (
        <a href={`/course/day-${prevDay}`} class="nav-prev">
          ← Day {prevDay}
        </a>
      )}
      
      <a href="/course" class="nav-overview">课程总览</a>
      
      {nextDay && (
        <a href={`/course/day-${nextDay}`} class="nav-next">
          Day {nextDay} →
        </a>
      )}
    </nav>

    <!-- 进度追踪 -->
    <div class="progress-tracker">
      <button class="btn btn-success mark-complete" data-day={day}>
        标记为已完成
      </button>
    </div>
  </div>

  <script>
    // 进度追踪脚本
    document.querySelector('.mark-complete')?.addEventListener('click', (e) => {
      const day = (e.target as HTMLElement).dataset.day
      let completed = []
      
      try {
        completed = JSON.parse(localStorage.getItem('completedDays') || '[]')
      } catch (error) {
        console.error('Error parsing completedDays:', error)
        completed = []
      }
      
      if (!completed.includes(day)) {
        completed.push(day)
        localStorage.setItem('completedDays', JSON.stringify(completed))
        ;(e.target as HTMLElement).textContent = '✓ 已完成'
        ;(e.target as HTMLElement).classList.add('completed')
      }
    })

    // 检查是否已完成
    let completedDays = []
    try {
      completedDays = JSON.parse(localStorage.getItem('completedDays') || '[]')
    } catch (error) {
      console.error('Error parsing completedDays:', error)
      completedDays = []
    }
    
    const currentDay = document.querySelector('.mark-complete')?.getAttribute('data-day')
    
    if (completedDays.includes(currentDay)) {
      const btn = document.querySelector('.mark-complete') as HTMLElement
      if (btn) {
        btn.textContent = '✓ 已完成'
        btn.classList.add('completed')
      }
    }
  </script>

  <style>
    .course-container {
      max-width: 900px;
      margin: 0 auto;
    }

    .course-header {
      margin-bottom: 2rem;
    }

    .course-meta {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
      flex-wrap: wrap;
    }

    .phase-badge,
    .difficulty-badge,
    .time-estimate {
      padding: 0.25rem 0.75rem;
      border-radius: var(--radius-md);
      font-size: 0.875rem;
      font-weight: 500;
    }

    .phase-badge {
      background: var(--color-primary);
      color: white;
    }

    .difficulty-badge {
      background: var(--color-bg);
      border: 1px solid var(--color-border);
    }

    .difficulty-badge.difficulty-beginner {
      border-color: var(--color-success);
      color: var(--color-success);
    }

    .difficulty-badge.difficulty-intermediate {
      border-color: var(--color-warning);
      color: var(--color-warning);
    }

    .difficulty-badge.difficulty-advanced {
      border-color: var(--color-accent);
      color: var(--color-accent);
    }

    .course-title {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 1rem;
      color: var(--color-text);
    }

    .day-number {
      color: var(--color-primary);
      font-size: 1.125rem;
      display: block;
      margin-bottom: 0.5rem;
    }

    .course-description {
      font-size: 1.125rem;
      color: var(--color-text-secondary);
      line-height: 1.6;
    }

    /* 学习目标 */
    .learning-objectives {
      background: var(--color-bg);
      border-radius: var(--radius-lg);
      padding: 2rem;
      margin-bottom: 3rem;
      border: 1px solid var(--color-border);
    }

    .learning-objectives h2 {
      font-size: 1.25rem;
      margin-bottom: 1rem;
      color: var(--color-text);
    }

    .learning-objectives ul {
      list-style: none;
      padding: 0;
    }

    .learning-objectives li {
      padding: 0.5rem 0;
      padding-left: 1.5rem;
      position: relative;
      color: var(--color-text-secondary);
    }

    .learning-objectives li::before {
      content: "✓";
      position: absolute;
      left: 0;
      color: var(--color-success);
      font-weight: bold;
    }

    /* 内容样式 */
    .course-content {
      background: var(--color-bg);
      border-radius: var(--radius-lg);
      padding: 3rem 2.5rem;
      margin-bottom: 3rem;
      line-height: 1.9;
    }

    .course-content h2 {
      font-size: 1.75rem;
      margin-top: 2rem;
      margin-bottom: 1rem;
      color: var(--color-text);
    }

    .course-content h3 {
      font-size: 1.375rem;
      margin-top: 1.5rem;
      margin-bottom: 0.75rem;
      color: var(--color-text);
    }

    .course-content p {
      margin-bottom: 1.5rem;
      color: var(--color-text-secondary);
      line-height: 1.8;
    }

    .course-content pre {
      background: var(--color-bg-secondary);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-md);
      padding: 1.5rem;
      overflow-x: auto;
      margin: 1.5rem 0 2rem 0;
      position: relative;
    }

    .course-content code {
      font-family: 'Consolas', 'Monaco', monospace;
      font-size: 0.875rem;
    }

    /* 代码示例和练习卡片 */
    .code-examples-section,
    .exercises-section,
    .resources-section {
      margin-bottom: 3.5rem;
    }

    .code-examples-section h2,
    .exercises-section h2,
    .resources-section h2 {
      font-size: 1.5rem;
      margin-bottom: 1rem;
      color: var(--color-text);
    }

    .code-example-card,
    .exercise-card {
      background: var(--color-bg);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-lg);
      padding: 1.5rem;
      margin-bottom: 1rem;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    
    .exercise-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 4px;
      height: 100%;
      background: var(--color-primary);
      transform: scaleY(0);
      transition: transform 0.3s ease;
    }
    
    .exercise-card:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
      border-color: var(--color-primary);
    }
    
    .exercise-card:hover::before {
      transform: scaleY(1);
    }

    .code-example-card h3,
    .exercise-card h3 {
      font-size: 1.25rem;
      margin-bottom: 0.5rem;
      color: var(--color-text);
    }

    .exercise-meta {
      display: flex;
      gap: 1rem;
      margin: 1rem 0;
    }

    .exercise-meta span {
      padding: 0.25rem 0.75rem;
      background: var(--color-bg-secondary);
      border-radius: var(--radius-sm);
      font-size: 0.875rem;
    }

    /* 按钮样式 */
    .btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      border-radius: var(--radius-md);
      font-weight: 500;
      text-decoration: none;
      transition: all 0.2s;
      border: none;
      cursor: pointer;
      margin-right: 0.5rem;
    }

    .btn-primary {
      background: var(--color-primary);
      color: white;
    }

    .btn-primary:hover {
      background: var(--color-primary);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(66, 184, 131, 0.3);
    }

    .btn-secondary {
      background: var(--color-bg-secondary);
      color: var(--color-text);
      border: 1px solid var(--color-border);
    }

    .btn-secondary:hover {
      background: var(--color-border);
    }

    .btn-outline {
      background: transparent;
      color: var(--color-primary);
      border: 1px solid var(--color-primary);
    }

    .btn-outline:hover {
      background: var(--color-primary);
      color: white;
    }

    .btn-success {
      background: var(--color-success);
      color: white;
    }

    .btn-success:hover {
      opacity: 0.9;
    }

    .btn-success.completed {
      background: var(--color-bg-secondary);
      color: var(--color-success);
      border: 1px solid var(--color-success);
    }

    /* 资源列表 */
    .resources-list {
      list-style: none;
      padding: 0;
    }

    .resources-list li {
      margin-bottom: 0.75rem;
    }

    .resources-list a {
      color: var(--color-primary);
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
    }

    .resources-list a:hover {
      text-decoration: underline;
    }

    /* 导航按钮 */
    .course-navigation {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 2rem 0;
      margin: 2rem 0;
      border-top: 1px solid var(--color-border);
      border-bottom: 1px solid var(--color-border);
    }

    .nav-prev,
    .nav-next,
    .nav-overview {
      padding: 0.5rem 1rem;
      color: var(--color-text);
      text-decoration: none;
      border-radius: var(--radius-md);
      transition: all 0.2s;
    }

    .nav-prev:hover,
    .nav-next:hover,
    .nav-overview:hover {
      background: var(--color-bg);
      color: var(--color-primary);
    }

    /* 进度追踪 */
    .progress-tracker {
      text-align: center;
      padding: 2rem 0;
    }

    .mark-complete {
      font-size: 1.125rem;
      padding: 1rem 2rem;
    }

    /* 响应式设计 */
    @media (max-width: 768px) {
      .course-title {
        font-size: 2rem;
      }

      .course-content {
        padding: 1.5rem;
      }

      .course-navigation {
        flex-wrap: wrap;
        gap: 1rem;
        justify-content: center;
      }
    }
  </style>
</BaseLayout>