---
/**
 * 每日课程页面模板
 * 动态路由，根据day参数渲染对应的课程内容
 */
import { getCollection, getEntry } from 'astro:content'
import BaseLayout from '@layouts/BaseLayout.astro'
import type { DayContent, PhaseInfo } from '../../types'
import { components } from '@components/mdx-components'
import TableOfContents from '@components/TableOfContents.astro'

export async function getStaticPaths() {
  const courses = await getCollection('courses')
  const phases = await getCollection('phases')
  
  return courses.map((course) => {
    const phase = phases.find(p => p.id.includes(course.data.phase))
    return {
      params: { day: course.data.day.toString() },
      props: { course, phase }
    }
  })
}

const { day } = Astro.params
const { course, phase } = Astro.props

// 获取相关的练习和解决方案
const exercises = await getCollection('exercises', ({ data }) => data.day === parseInt(day))
const solutions = await getCollection('solutions', ({ data }) => data.day === parseInt(day))
const codeExamples = await getCollection('codeExamples', ({ data }) => data.day === parseInt(day))

// 计算前一天和后一天的链接
const prevDay = parseInt(day) > 1 ? parseInt(day) - 1 : null
const nextDay = parseInt(day) < 40 ? parseInt(day) + 1 : null

// 获取页面元数据
const pageTitle = `${course.data.title} | 40天Web开发课程`
const pageDescription = course.data.description

// Get the Content component from the course
const { Content, headings } = await course.render()

// Extract checklist items from course content
const courseBody = course.body || ''
const checklistRegex = /##.*?✅.*?(?=##|$)/s
const checklistMatch = courseBody.match(checklistRegex)
let checklistItems = []

if (checklistMatch) {
  const checklistSection = checklistMatch[0]
  const itemMatches = checklistSection.match(/- \[ \] (.+)/g)
  if (itemMatches) {
    checklistItems = itemMatches.map(item => item.replace(/- \[ \] /, '').trim())
  }
}
---

<BaseLayout title={course.data.title} description={pageDescription} currentDay={parseInt(day)}>
  <div class="course-page-wrapper">
    <div class="course-container">

    <!-- 课程头部 -->
    <header class="course-header">
      <div class="course-meta">
        <span class="phase-badge">{phase.data.name}</span>
        <span class="difficulty-badge difficulty-{course.data.difficulty}">
          {course.data.difficulty === 'beginner' ? '初级' : 
           course.data.difficulty === 'intermediate' ? '中级' : '高级'}
        </span>
        <span class="time-estimate">预计时间：{course.data.estimatedTime}分钟</span>
      </div>
      
      <h1 class="course-title">
        <span class="day-number">Day {day}</span>
        {course.data.title}
      </h1>
      
      <p class="course-description">{course.data.description}</p>
    </header>

    <!-- 学习目标 -->
    <section class="learning-objectives">
      <h2>📋 学习目标</h2>
      <ul>
        {course.data.objectives.map((objective) => (
          <li>{objective}</li>
        ))}
      </ul>
    </section>

    <!-- 主要内容 -->
    <article class="course-content">
      <Content components={components} />
    </article>

    <!-- 交互式检查清单 -->
    {checklistItems.length > 0 && (
      <section class="checklist-section">
        <div class="interactive-checklist-wrapper" data-items={JSON.stringify(checklistItems)}></div>
      </section>
    )}

    <!-- 练习部分 -->
    {exercises.length > 0 && (
      <section class="exercises-section">
        <h2>💪 今日练习</h2>
        {exercises.map((exercise) => (
          <div class="exercise-card">
            <h3>{exercise.data.title}</h3>
            <p>{exercise.data.description}</p>
            <div class="exercise-meta">
              <span class="difficulty">{exercise.data.difficulty}</span>
              <span class="time">{exercise.data.estimatedTime}分钟</span>
            </div>
            <a href={`/course/day-${day}/exercise`} class="btn btn-primary">
              开始练习
            </a>
            {solutions.length > 0 && (
              <a href={`/course/day-${day}/solution`} class="btn btn-outline">
                查看解决方案
              </a>
            )}
          </div>
        ))}
      </section>
    )}

    <!-- 代码示例部分 -->
    {codeExamples.length > 0 && (
      <section class="code-examples-section">
        <h2>💻 代码示例</h2>
        {codeExamples.map((example) => (
          <div class="code-example-card">
            <h3>{example.data.title}</h3>
            <p>{example.data.description}</p>
            <a href={`/course/day-${day}/code`} class="btn btn-secondary">
              查看代码
            </a>
          </div>
        ))}
      </section>
    )}

    <!-- 资源链接 - 移动到页面底部 -->
    {course.data.resources && course.data.resources.length > 0 && (
      <section class="resources-section">
        <h2>📚 学习资源</h2>
        <ul class="resources-list">
          {course.data.resources.map((resource) => (
            <li>
              <a href={resource.url} target="_blank" rel="noopener noreferrer">
                {resource.type === 'article' && '📄'}
                {resource.type === 'video' && '🎥'}
                {resource.type === 'documentation' && '📖'}
                {resource.type === 'tool' && '🔧'}
                {resource.title}
              </a>
            </li>
          ))}
        </ul>
      </section>
    )}

    <!-- 导航按钮 -->
    <nav class="course-navigation">
      {prevDay && (
        <a href={`/course/day-${prevDay}`} class="nav-prev">
          ← Day {prevDay}
        </a>
      )}
      
      <a href="/course" class="nav-overview">课程总览</a>
      
      {nextDay && (
        <a href={`/course/day-${nextDay}`} class="nav-next">
          Day {nextDay} →
        </a>
      )}
    </nav>

    <!-- 进度追踪 -->
    <div class="progress-tracker">
      <button class="btn btn-success mark-complete" data-day={day}>
        标记为已完成
      </button>
    </div>
  </div>
  
  <!-- Table of Contents -->
  <aside class="toc-sidebar">
    <TableOfContents headings={headings} />
  </aside>
  </div>

  <script>
    // 进度追踪脚本
    document.querySelector('.mark-complete')?.addEventListener('click', (e) => {
      const day = (e.target as HTMLElement).dataset.day
      let completed = []
      
      try {
        completed = JSON.parse(localStorage.getItem('completedDays') || '[]')
      } catch (error) {
        console.error('Error parsing completedDays:', error)
        completed = []
      }
      
      if (!completed.includes(day)) {
        completed.push(day)
        localStorage.setItem('completedDays', JSON.stringify(completed))
        ;(e.target as HTMLElement).textContent = '✓ 已完成'
        ;(e.target as HTMLElement).classList.add('completed')
      }
    })

    // 检查是否已完成
    let completedDays = []
    try {
      completedDays = JSON.parse(localStorage.getItem('completedDays') || '[]')
    } catch (error) {
      console.error('Error parsing completedDays:', error)
      completedDays = []
    }
    
    const currentDay = document.querySelector('.mark-complete')?.getAttribute('data-day')
    
    if (completedDays.includes(currentDay)) {
      const btn = document.querySelector('.mark-complete') as HTMLElement
      if (btn) {
        btn.textContent = '✓ 已完成'
        btn.classList.add('completed')
      }
    }

    // 处理交互式检查清单
    document.addEventListener('DOMContentLoaded', () => {
      const checklistWrappers = document.querySelectorAll('.interactive-checklist-wrapper')
      
      checklistWrappers.forEach((wrapper) => {
        const itemsData = wrapper.getAttribute('data-items')
        if (!itemsData || itemsData === '[]') return
        
        try {
          const items = JSON.parse(itemsData)
          if (items.length === 0) return
          
          const checklistId = `checklist-${Math.random().toString(36).substr(2, 9)}`
          const storageKey = `checklist-day-${currentDay}`
          
          // 创建检查清单HTML
          const checklistHTML = `
            <div class="interactive-checklist" data-checklist-id="${checklistId}">
              <div class="checklist-header">
                <h2>✅ 今日检查清单</h2>
                <span class="checklist-progress">
                  <span class="progress-count">0</span> / ${items.length} 完成
                </span>
              </div>
              <p class="checklist-description">确保你已完成以下任务：</p>
              <div class="checklist-items">
                ${items.map((item, index) => `
                  <div class="checklist-item">
                    <input 
                      type="checkbox" 
                      id="${checklistId}-item-${index}"
                      class="checklist-checkbox"
                      data-index="${index}"
                    />
                    <label for="${checklistId}-item-${index}">${item}</label>
                  </div>
                `).join('')}
              </div>
              <div class="checklist-actions">
                <button class="btn-reset" aria-label="重置清单">
                  🔄 重置清单
                </button>
              </div>
            </div>
          `
          
          wrapper.innerHTML = checklistHTML
          
          // 初始化检查清单功能
          const checklist = wrapper.querySelector('.interactive-checklist')
          const checkboxes = checklist.querySelectorAll('.checklist-checkbox') as NodeListOf<HTMLInputElement>
          const progressCount = checklist.querySelector('.progress-count')
          const resetBtn = checklist.querySelector('.btn-reset')
          
          // 从localStorage恢复状态
          function restoreState() {
            const saved = localStorage.getItem(storageKey)
            if (saved) {
              try {
                const states = JSON.parse(saved)
                checkboxes.forEach((cb, index) => {
                  cb.checked = states[index] || false
                  updateItemStyle(cb)
                })
                updateProgress()
              } catch (e) {
                console.error('Error restoring checklist state:', e)
              }
            }
          }
          
          // 更新进度
          function updateProgress() {
            const checked = Array.from(checkboxes).filter(cb => cb.checked).length
            if (progressCount) {
              progressCount.textContent = checked.toString()
            }
          }
          
          // 保存状态到localStorage
          function saveState() {
            const states = Array.from(checkboxes).map(cb => cb.checked)
            localStorage.setItem(storageKey, JSON.stringify(states))
          }
          
          // 更新单项样式
          function updateItemStyle(checkbox: HTMLInputElement) {
            const item = checkbox.closest('.checklist-item')
            if (item) {
              if (checkbox.checked) {
                item.classList.add('completed')
              } else {
                item.classList.remove('completed')
              }
            }
          }
          
          // 监听checkbox变化
          checkboxes.forEach((checkbox) => {
            checkbox.addEventListener('change', () => {
              updateItemStyle(checkbox)
              updateProgress()
              saveState()
            })
          })
          
          // 重置按钮
          resetBtn?.addEventListener('click', () => {
            const confirmed = confirm('确定要重置清单吗？这将清除所有已勾选的项目。')
            if (confirmed) {
              checkboxes.forEach(cb => {
                cb.checked = false
                updateItemStyle(cb)
              })
              updateProgress()
              saveState()
            }
          })
          
          // 初始化
          restoreState()
        } catch (e) {
          console.error('Error initializing checklist:', e)
        }
      })
    })
  </script>

  <style>
    .course-page-wrapper {
      display: grid;
      grid-template-columns: 1fr auto;
      gap: 3rem;
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 2rem;
      align-items: flex-start;
    }

    .course-container {
      max-width: 900px;
      width: 100%;
    }

    .toc-sidebar {
      position: sticky;
      top: 80px;
    }

    .course-header {
      margin-bottom: 3rem;
      padding-bottom: 2rem;
      border-bottom: 2px solid var(--color-border);
    }

    .course-meta {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      flex-wrap: wrap;
    }

    .phase-badge,
    .difficulty-badge,
    .time-estimate {
      padding: 0.5rem 1rem;
      border-radius: var(--radius-md);
      font-size: 0.875rem;
      font-weight: 600;
    }

    .phase-badge {
      background: var(--color-primary);
      color: white;
    }

    .difficulty-badge {
      background: var(--color-bg);
      border: 2px solid var(--color-border);
    }

    .difficulty-badge.difficulty-beginner {
      border-color: var(--color-success);
      color: var(--color-success);
    }

    .difficulty-badge.difficulty-intermediate {
      border-color: var(--color-warning);
      color: var(--color-warning);
    }

    .difficulty-badge.difficulty-advanced {
      border-color: var(--color-accent);
      color: var(--color-accent);
    }

    .course-title {
      font-size: 3rem;
      font-weight: 800;
      margin-bottom: 1.5rem;
      color: var(--color-text);
      line-height: 1.2;
    }

    .day-number {
      color: var(--color-primary);
      font-size: 1.25rem;
      font-weight: 600;
      display: block;
      margin-bottom: 0.75rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .course-description {
      font-size: 1.25rem;
      color: var(--color-text-secondary);
      line-height: 1.7;
      max-width: 90%;
    }

    /* 学习目标 */
    .learning-objectives {
      background: linear-gradient(135deg, var(--color-bg) 0%, var(--color-bg-secondary) 100%);
      border-radius: var(--radius-lg);
      padding: 2.5rem;
      margin-bottom: 3rem;
      border: 1px solid var(--color-border);
      position: relative;
      overflow: hidden;
    }

    .learning-objectives::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      background: linear-gradient(90deg, var(--color-primary), var(--color-success));
    }

    .learning-objectives h2 {
      font-size: 1.5rem;
      margin-bottom: 1.5rem;
      color: var(--color-text);
      font-weight: 700;
    }

    .learning-objectives ul {
      list-style: none;
      padding: 0;
      display: grid;
      gap: 1rem;
    }

    .learning-objectives li {
      padding: 1rem 1.5rem;
      background: var(--color-bg);
      border-radius: var(--radius-md);
      border: 1px solid var(--color-border);
      position: relative;
      color: var(--color-text-secondary);
      font-weight: 500;
      transition: all 0.2s ease;
    }

    .learning-objectives li:hover {
      transform: translateX(5px);
      border-color: var(--color-success);
    }

    .learning-objectives li::before {
      content: "✓";
      position: absolute;
      left: 0.75rem;
      top: 50%;
      transform: translateY(-50%);
      color: var(--color-success);
      font-weight: bold;
      font-size: 1.1rem;
    }

    .learning-objectives li {
      padding-left: 3rem;
    }

    /* 内容样式 */
    .course-content {
      background: var(--color-bg);
      border-radius: var(--radius-lg);
      padding: 3rem;
      margin-bottom: 3rem;
      line-height: 1.8;
      border: 1px solid var(--color-border);
    }

    .course-content > *:first-child {
      margin-top: 0;
    }

    .course-content > *:last-child {
      margin-bottom: 0;
    }

    .course-content h2 {
      font-size: 2rem;
      margin: 3rem 0 1.5rem 0;
      color: var(--color-text);
      font-weight: 700;
      padding-bottom: 0.75rem;
      border-bottom: 2px solid var(--color-border);
    }

    .course-content h3 {
      font-size: 1.5rem;
      margin: 2.5rem 0 1rem 0;
      color: var(--color-text);
      font-weight: 600;
    }

    .course-content h4 {
      font-size: 1.25rem;
      margin: 2rem 0 0.75rem 0;
      color: var(--color-text);
      font-weight: 600;
    }

    .course-content p {
      margin-bottom: 1.5rem;
      color: var(--color-text-secondary);
      line-height: 1.8;
      font-size: 1.05rem;
    }

    .course-content ul,
    .course-content ol {
      margin-bottom: 1.5rem;
      padding-left: 2rem;
    }

    .course-content li {
      margin-bottom: 0.5rem;
      color: var(--color-text-secondary);
      line-height: 1.6;
    }

    .course-content pre {
      background: var(--color-bg-secondary);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-md);
      padding: 2rem 1.5rem;
      overflow-x: auto;
      margin: 2rem 0 2.5rem 0;
      position: relative;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .course-content code {
      font-family: 'Consolas', 'Monaco', monospace;
      font-size: 0.875rem;
    }

    .course-content blockquote {
      border-left: 4px solid var(--color-primary);
      padding: 1rem 1.5rem;
      margin: 2rem 0;
      background: var(--color-bg-secondary);
      border-radius: 0 var(--radius-md) var(--radius-md) 0;
    }

    /* 代码示例和练习卡片 */
    .code-examples-section,
    .exercises-section,
    .resources-section,
    .checklist-section {
      margin-bottom: 3rem;
    }

    .code-examples-section h2,
    .exercises-section h2,
    .resources-section h2 {
      font-size: 1.75rem;
      margin-bottom: 1.5rem;
      color: var(--color-text);
      font-weight: 700;
    }

    .code-example-card,
    .exercise-card {
      background: var(--color-bg);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-lg);
      padding: 2rem;
      margin-bottom: 1.5rem;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    
    .exercise-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 4px;
      height: 100%;
      background: var(--color-primary);
      transform: scaleY(0);
      transition: transform 0.3s ease;
    }
    
    .exercise-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
      border-color: var(--color-primary);
    }
    
    .exercise-card:hover::before {
      transform: scaleY(1);
    }

    .code-example-card h3,
    .exercise-card h3 {
      font-size: 1.375rem;
      margin-bottom: 0.75rem;
      color: var(--color-text);
      font-weight: 600;
    }

    .exercise-meta {
      display: flex;
      gap: 1rem;
      margin: 1.5rem 0;
    }

    .exercise-meta span {
      padding: 0.5rem 1rem;
      background: var(--color-bg-secondary);
      border-radius: var(--radius-sm);
      font-size: 0.875rem;
      font-weight: 500;
    }

    /* 按钮样式 */
    .btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.875rem 1.75rem;
      border-radius: var(--radius-md);
      font-weight: 600;
      text-decoration: none;
      transition: all 0.2s;
      border: none;
      cursor: pointer;
      margin-right: 0.75rem;
      font-size: 0.95rem;
    }

    .btn-primary {
      background: var(--color-primary);
      color: white;
    }

    .btn-primary:hover {
      background: var(--color-primary);
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(66, 184, 131, 0.4);
    }

    .btn-secondary {
      background: var(--color-bg-secondary);
      color: var(--color-text);
      border: 1px solid var(--color-border);
    }

    .btn-secondary:hover {
      background: var(--color-border);
      transform: translateY(-1px);
    }

    .btn-outline {
      background: transparent;
      color: var(--color-primary);
      border: 1px solid var(--color-primary);
    }

    .btn-outline:hover {
      background: var(--color-primary);
      color: white;
    }

    .btn-success {
      background: var(--color-success);
      color: white;
    }

    .btn-success:hover {
      opacity: 0.9;
      transform: translateY(-1px);
    }

    .btn-success.completed {
      background: var(--color-bg-secondary);
      color: var(--color-success);
      border: 1px solid var(--color-success);
    }

    /* 资源列表 */
    .resources-list {
      list-style: none;
      padding: 0;
      display: grid;
      gap: 1rem;
    }

    .resources-list li {
      background: var(--color-bg);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-md);
      padding: 1rem 1.5rem;
      transition: all 0.2s ease;
    }

    .resources-list li:hover {
      border-color: var(--color-primary);
      transform: translateX(4px);
    }

    .resources-list a {
      color: var(--color-primary);
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      font-weight: 500;
    }

    .resources-list a:hover {
      text-decoration: underline;
    }

    /* 导航按钮 */
    .course-navigation {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 2.5rem 0;
      margin: 3rem 0 2rem 0;
      border-top: 2px solid var(--color-border);
      border-bottom: 2px solid var(--color-border);
    }

    .nav-prev,
    .nav-next,
    .nav-overview {
      padding: 0.75rem 1.5rem;
      color: var(--color-text);
      text-decoration: none;
      border-radius: var(--radius-md);
      transition: all 0.2s;
      font-weight: 500;
      border: 1px solid var(--color-border);
    }

    .nav-prev:hover,
    .nav-next:hover,
    .nav-overview:hover {
      background: var(--color-bg);
      color: var(--color-primary);
      border-color: var(--color-primary);
      transform: translateY(-2px);
    }

    /* 进度追踪 */
    .progress-tracker {
      text-align: center;
      padding: 3rem 0;
    }

    .mark-complete {
      font-size: 1.125rem;
      padding: 1.25rem 2.5rem;
    }

    /* 交互式检查清单样式 */
    .interactive-checklist {
      background: linear-gradient(135deg, var(--color-bg) 0%, var(--color-bg-secondary) 100%);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-lg);
      padding: 2.5rem;
      margin: 2rem 0;
      position: relative;
      overflow: hidden;
    }

    .interactive-checklist::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      background: linear-gradient(90deg, var(--color-success), var(--color-primary));
    }

    .checklist-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .checklist-header h2 {
      margin: 0;
      font-size: 1.5rem;
      color: var(--color-text);
      font-weight: 700;
    }

    .checklist-progress {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 1rem;
      background-color: var(--color-bg);
      border: 1px solid var(--color-border);
      border-radius: 999px;
      font-size: 0.875rem;
      font-weight: 600;
      color: var(--color-text-secondary);
    }

    .progress-count {
      color: var(--color-success);
      font-weight: 700;
    }

    .checklist-description {
      color: var(--color-text-secondary);
      margin-bottom: 1.5rem;
      font-size: 1.05rem;
    }

    .checklist-items {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .checklist-item {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1rem 1.5rem;
      background-color: var(--color-bg);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-md);
      transition: all 0.2s;
    }

    .checklist-item:hover {
      border-color: var(--color-primary);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
      transform: translateX(4px);
    }

    .checklist-checkbox {
      width: 22px;
      height: 22px;
      cursor: pointer;
      accent-color: var(--color-success);
      flex-shrink: 0;
    }

    .checklist-checkbox:checked + label {
      text-decoration: line-through;
      color: var(--color-text-secondary);
      opacity: 0.7;
    }

    .checklist-item label {
      cursor: pointer;
      flex: 1;
      color: var(--color-text);
      transition: all 0.2s;
      user-select: none;
      font-weight: 500;
      line-height: 1.5;
    }

    .checklist-item.completed {
      background-color: var(--color-bg-secondary);
      border-color: var(--color-success);
      opacity: 0.8;
    }

    .checklist-actions {
      margin-top: 1.5rem;
      padding-top: 1.5rem;
      border-top: 1px solid var(--color-border);
      display: flex;
      justify-content: flex-end;
    }

    .btn-reset {
      padding: 0.75rem 1.25rem;
      background-color: var(--color-bg-secondary);
      color: var(--color-text-secondary);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-md);
      font-size: 0.875rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s;
    }

    .btn-reset:hover {
      background-color: var(--color-bg);
      border-color: var(--color-text-secondary);
      color: var(--color-text);
      transform: translateY(-1px);
    }

    /* 响应式设计 */
    @media (max-width: 1200px) {
      .course-page-wrapper {
        grid-template-columns: 1fr;
        padding: 0 1rem;
      }

      .toc-sidebar {
        display: none;
      }
    }

    @media (max-width: 768px) {
      .course-title {
        font-size: 2.25rem;
      }

      .course-content {
        padding: 2rem 1.5rem;
      }

      .learning-objectives {
        padding: 2rem 1.5rem;
      }

      .course-navigation {
        flex-wrap: wrap;
        gap: 1rem;
        justify-content: center;
      }

      .interactive-checklist {
        padding: 1.5rem;
      }

      .checklist-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.75rem;
      }

      .checklist-item {
        padding: 0.75rem 1rem;
      }

      .exercise-card,
      .code-example-card {
        padding: 1.5rem;
      }
    }
  </style>
</BaseLayout>